#!/bin/bash
set -eu

USER_AGENT='Termux-PKG/1.0 mirror-checker (termux-tools @PACKAGE_VERSION@) Termux (@TERMUX_APP_PACKAGE@; install-prefix:@TERMUX_PREFIX@)'

show_help() {
	local cache_size
	cache_size=$(du -sh @TERMUX_CACHE_DIR@/apt/archives 2>/dev/null | cut -f1)

	echo 'Usage: pkg [--check-mirror] command [arguments]'
	echo
	echo 'A tool for managing packages.'
	echo '  --check-mirror forces a re-check of availability of mirrors'
	echo
	echo 'Commands:'
	echo
	echo '  autoclean            - Remove all outdated packages from .deb package'
	echo '                         cache.'
	echo
	echo '  clean                - Remove all packages from .deb package cache.'
	[ -n "$cache_size" ] && echo "                         Using $cache_size now."
	echo
	echo '  files <packages>     - Show all files installed by packages.'
	echo
	echo '  install <packages>   - Install specified packages.'
	echo
	echo '  list-all             - List all packages available in repositories.'
	echo
	echo '  list-installed       - List installed packages.'
	echo
	echo '  reinstall <packages> - Reinstall specified installed packages at the'
	echo '                         latest version.'
	echo
	echo '  search <query>       - Search package by query, for example by name or'
	echo '                         description part.'
	echo
	echo '  show <packages>      - Show basic metadata, such as dependencies.'
	echo
	echo '  uninstall <packages> - Uninstall specified packages. Configuration files'
	echo '                         will be left intact.'
	echo
	echo '  upgrade              - Upgrade all installed packages to the latest'
	echo '                         version.'
	echo
	exit 1
}

check_mirror() {
	local mirror="${1%/}"
	local timeout="${2-5}"

	timeout "$((timeout + 1))" curl \
		--head \
		--fail \
		--connect-timeout "$timeout" \
		--location \
		--user-agent "$USER_AGENT" \
		"$mirror/dists/stable/Release" >/dev/null 2>&1
}

hostname() {
	echo "$1" | awk -F'[/:]' '{print $4}'
}

last_modified() {
	local mtime
	local now

	mtime=$(date -r "$1" '+%s')
	now=$(date '+%s')
	echo $((now - mtime))
}

has_repo() {
	# Check if root-repo or x11-repo are installed
	repo="$1"

	if [ -f "/etc/apt/sources.list.d/$repo.list" ]; then
		echo true
	else
		echo false
	fi
}

get_random_mirror() {
	array=("${!1}")
	echo -n ${array["$[RANDOM % ${#array[@]}]"]}
}

select_mirror() {
	local default_repo="@TERMUX_PREFIX@/etc/termux/mirrors/default"

	if [ -d "@TERMUX_PREFIX@/etc/termux/chosen_mirrors" ]; then
		mirrors=($(find @TERMUX_PREFIX@/etc/termux/chosen_mirrors/ -type f))
	else
		echo "No group of mirrors selected. You might want to select a group by running 'termux-change-repo'"
		mirrors=("@TERMUX_PREFIX@/etc/termux/mirrors/default")
		mirrors+=($(find @TERMUX_PREFIX@/etc/termux/mirrors/{europe,north_america,iran,china}/ -type f))
	fi

	local current_mirror
	current_mirror=$(grep -m 1 -P "^\s*deb\s+" @TERMUX_PREFIX@/etc/apt/sources.list | grep -oP 'https?://[^\s]+')

	# Do not update mirror if $TERMUX_PKG_NO_MIRROR_SELECT was set.
	if [ -n "${TERMUX_PKG_NO_MIRROR_SELECT-}" ] && [ ! -n "$current_mirror" ]; then
		return
	fi

	# Mirrors are rotated if 6 hours timeout has been passed or mirror is no longer accessible.
	local pkgcache="@TERMUX_CACHE_DIR@/apt/pkgcache.bin"
	if [ -e "$pkgcache" ] && (( $(last_modified "$pkgcache") <= 6 * 3600 )) && [ "$force_check_mirror" = "false" ]; then
		if [ -n "$current_mirror" ]; then
			echo -n "Checking availability of current mirror: "
			if check_mirror "$current_mirror"; then
				echo "ok"
				return
			else
				echo "bad"
			fi
		fi
	fi

	# Test mirror availability, remove unaccessible mirrors from list.
	echo "Testing the available mirrors:"
	local w
	for w in "${!mirrors[@]}"; do
		echo -n "[*] ${mirrors[$w]}: "
		mirror=$(source ${mirrors[$w]}; echo $MAIN)
		if check_mirror "$mirror"; then
			echo "ok"
		else
			echo "bad"
			unset "mirrors[$w]"
		fi
	done
	unset w

	local selected_mirror=""
	if [ "${#mirrors[@]}" -gt 0 ]; then
		# Get random mirror from array (without any weights)
		selected_mirror="$(get_random_mirror "mirrors[@]")"
	else
		selected_mirror="$default_repo"
	fi

	if [ -n "$selected_mirror" ]; then
		(
			source "$selected_mirror"
			echo "deb $MAIN stable main" > @TERMUX_PREFIX@/etc/apt/sources.list
			if [ "$(has_repo x11)" == "true" ]; then
				echo "deb $X11 x11 main" > @TERMUX_PREFIX@/etc/apt/sources.list.d/x11.list
			fi
			if [ "$(has_repo root)" == "true" ]; then
				echo "deb $ROOT root stable" > @TERMUX_PREFIX@/etc/apt/sources.list.d/root.list
			fi
		)
	fi
}

update_apt_cache() {
	local current_host
	current_host=$(sed -nE -e 's|^\s*deb\s+https?://(.+)\s+stable\s+main$|\1|p' @TERMUX_PREFIX@/etc/apt/sources.list | head -n 1)

	if [ -z "$current_host" ]; then
		# No primary repositories configured?
		apt update
		return
	fi

	local metadata_file
	metadata_file=$(
		list_prefix=$(echo "$current_host" | sed 's|/|_|g')
		arch=$(dpkg --print-architecture)
		echo "@TERMUX_PREFIX@/var/lib/apt/lists/${list_prefix}_dists_stable_main_binary-${arch}_Packages" | sed 's|__|_|g'
	)

	if [ ! -e "@TERMUX_CACHE_DIR@/apt/pkgcache.bin" ] || [ ! -e "$metadata_file" ]; then
		apt update
		return
	fi

	local cache_modified
	cache_modified=$(last_modified "@TERMUX_CACHE_DIR@/apt/pkgcache.bin")

	local sources_modified
	sources_modified=$(last_modified "@TERMUX_PREFIX@/etc/apt/sources.list")

	if (( sources_modified <= cache_modified )) || (( cache_modified > 1200 )); then
		apt update
	fi
}

if [ $# = 0 ]; then
	show_help
fi

force_check_mirror=false
if [ "$1" = "--check-mirror" ]; then
    force_check_mirror=true
    shift 1
fi

CMD="$1"
shift 1

case "$CMD" in
	f*) dpkg -L "$@";;
	h*) show_help;;
	sh*|inf*) apt show "$@";;
	add|i*)
		select_mirror
		update_apt_cache
		apt install "$@"
		;;
	autoc*) apt autoclean;;
	cl*) apt clean;;
	list-a*) apt list "$@";;
	list-i*) apt list --installed "$@";;
	rei*) apt install --reinstall "$@";;
	se*)
		select_mirror
		update_apt_cache
		apt search "$@"
		;;
	un*|rem*|rm|del*) apt remove "$@";;
	up*)
		select_mirror
		apt update
		apt full-upgrade "$@"
		;;
	*) echo "Unknown command: '$CMD' (run 'pkg help' for usage information)"; exit 1;;
esac
